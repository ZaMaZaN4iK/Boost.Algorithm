[/ QuickBook Document version 1.5 ]

[section:all Header: 'all.hpp']

[/license

Copyright (c) 2010-2011 Marshall Clow

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

The header file 'all.hpp' contains a series of algorithms for testing properties of a sequence. They all follow the same pattern: they test individual elements in a sequence to see if every element in a sequence has a particular property.

Some of these algorithms are defined to be part of the C++11 standard library in section 25.2 (Non-modifying sequence algorithms). If we are building with a C++11 compiler, the standard library versions will be used.

Complexity: Unless otherwise noted, these routines all run in ['O(N)] (linear) time. Each of the routines in this file will either compare against the value or call the predicate for each element in the sequence. If any of the values in the range fails the test, the algorithm will return false immediately, without examining the remaining items in the sequence.

Iterator requirements: The algorithms in this file should work on all kinds of iterators.

[heading all_of]

The function `all_of` returns true if the predicate returns true for every item in the sequence..

``
template<typename InputIterator, typename Pred>
	bool all_of ( InputIterator first, InputIterator last, Pred p );
template<typename R, typename Pred> 
	bool all_of ( const R &range,  Pred p );
``

[heading any_of]
The function `any_of` returns true if the predicate returns true for any item in the sequence.

``
template<typename InputIterator, typename Pred>
	bool any_of ( InputIterator first, InputIterator last, Pred p );
template<typename R, typename Pred> 
	bool any_of ( const R &range,  Pred p );
``

[heading none_of]
The function `none_of` returns true if the predicate returns false for every item in the sequence.

``
template<typename InputIterator, typename Pred>
	bool none_of ( InputIterator first, InputIterator last, Pred p );
template<typename R, typename Pred> 
	bool none_of ( const R &range,  Pred p );
``

[heading one_of]
The function `one_of` returns true if the predicate returns true for exactly one item in the sequence.

``
template<typename InputIterator, typename Pred>
	bool one_of ( InputIterator first, InputIterator last, Pred p );
template<typename R, typename Pred> 
	bool one_of ( const R &range,  Pred p );
``



Examples: Given the container `c` containing `{ 0, 1, 2, 3, 4, 5 }`, then
``
bool isOdd ( int i ) { return i % 2 == 1; }
bool lessThan10 ( int i ) { return i < 10; }

one_of ( c.begin (), c.end (), 3 ) --> true
one_of ( c, 3 ) --> true
none_of ( c, 9 ) --> true
any_of ( c.begin (), c.end (), 9 ) --> false
all_of ( c, isOdd ) --> false
all_of ( c.begin (), c.end (), lessThan10 ) --> true
``



[heading all_of_equal]
The function `all_of_equal` returns true if each item in the sequence compares equal to the value `val`:

``
template<typename InputIterator, typename V>
	bool all_of_equal ( InputIterator first, InputIterator last, const V &val );
template<typename R, typename V> 
	bool all_of_equal ( const R &range,  const V &val );
``

[heading any_of_equal]
The function `any_of_equal` returns true if any item in the sequence compares equal to the value `val`:

``
template<typename InputIterator, typename V>
	bool any_of_equal ( InputIterator first, InputIterator last, const V &val );
template<typename R, typename V> 
	bool any_of_equal ( const R &range,  const V &val );
``
  
[heading none_of_equal]
The function `none_of_equal` returns true if no item in the sequence compares equal to the value `val`:

``
template<typename InputIterator, typename V>
	bool none_of_equal ( InputIterator first, InputIterator last, const V &val );
template<typename R, typename V> 
	bool none_of_equal ( const R &range,  const V &val );
``
  
[heading one_of_equal]
The function `one_of` returns true if exactly one item in the sequence compares equal to the value `val`:

``
template<typename InputIterator, typename V>
	bool none_of_equal ( InputIterator first, InputIterator last, const V &val );
template<typename R, typename V> 
	bool none_of_equal ( const R &range,  const V &val );
``


[endsect]
